// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int  @id @default(autoincrement())
  email    String?
  username String
  fullName String?
  password String
  bio      String?
  profile_pic String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  isfollow String?

  posts Posts[]
  liked Like[]
  following Follow[]
  followers Followers[]
}

model Posts {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    Int
  parentId  Int?
  
  post     Posts?      @relation("PostReplies", fields: [parentId], references: [id])
  comments Posts[]     @relation("PostReplies")
  author User @relation(fields: [userId], references: [id])
  images   PostImage[]
  likes    Like[]
}

model PostImage {
  id     Int    @id @default(autoincrement())
  image  String
  postId Int
  post   Posts  @relation(fields: [postId], references: [id])
}

model Like {
  userId Int
  postId Int
  user   User  @relation(fields: [userId], references: [id])
  post   Posts @relation(fields: [postId], references: [id])
  @@id([userId, postId])
}

model Follow {
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  @@id([userId])
}

model Followers {
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  @@id([userId])
}